(define (domain authr)
            (:requirements :durative-actions :action-costs :fluents :typing :equality)
            (:types element - object
                    agent thing destination - element
                    therblig - object
                    te tl g rl r h - therblig
            )

        (:predicates
            (free ?a - agent)
            (gripping ?a - agent)
            (not-gripping ?a - agent)
            (agent-space ?destination)
            (thing-space ?destination)
            (at ?e - element ?d - destination)
            (not-executed ?th - therblig)
            (agent-allocation ?th - therblig ?a - agent)
            (thing-allocation ?th - therblig ?t - thing)
            (destination-allocation ?th - therblig ?d - destination)
        )

        (:functions
              (total-cost)
              (agent-allocation ?a - agent ?th - therblig)
              (thing-allocation ?t - thing ?th - therblig)
              (destination-allocation ?d - destination ?th - therblig)
              (therblig-cost ?th - therblig ?a - agent)
              (therblig-time ?th - therblig ?a - agent ?dcurrent - destination ?dnew - destination)
        )

        (:durative-action transport-empty
            :parameters (?th - te ?a - agent ?dcurrent ?dnew - destination)
            :duration (= ?duration (therblig-time ?th ?a ?dcurrent ?dnew))
            :condition (and (at start (free ?a))
                            (at start (not-executed ?th))
                            (at start (agent-allocation ?th ?a))
                            (at start (destination-allocation ?th ?dnew))
                            (at start (at ?a ?dcurrent))
                            (at start (not-gripping ?a))
                            (at end (agent-space ?dnew))
                       )
            :effect (and (at start (not (free ?a)))
                         (at start (not (not-executed ?th)))
                         (at start (not (at ?a ?dcurrent)))
                         (at start (agent-space ?dcurrent))
                         (at end (at ?a ?dnew))
                         (at end (free ?a))
                         (at end (not (agent-space ?dnew)))
                         (at end (increase (total-cost) (therblig-cost ?th ?a)))
                     )
        )

        (:durative-action transport-loaded
            :parameters (?th - tl ?a - agent ?t - thing ?dcurrent ?dnew - destination)
            :duration (= ?duration (therblig-time ?th ?a ?dcurrent ?dnew))
            :condition (and (at start (free ?a))
                            (at start (not-executed ?th))
                            (at start (agent-allocation ?th ?a))
                            (at start (thing-allocation ?th ?t))
                            (at start (destination-allocation ?th ?dnew))
                            (at start (at ?a ?dcurrent))
                            (at start (at ?t ?dcurrent))
                            (at start (gripping ?a))
                            (at end (agent-space ?dnew))
                            (at end (thing-space ?dnew))
                       )
            :effect (and (at start (not (free ?a)))
                         (at start (not (not-executed ?th)))
                         (at start (not (at ?a ?dcurrent)))
                         (at start (not (at ?t ?dcurrent)))
                         (at start (agent-space ?dcurrent))
                         (at start (thing-space ?dcurrent))
                         (at end (at ?a ?dnew))
                         (at end (at ?t ?dnew))
                         (at end (not (agent-space ?dnew)))
                         (at end (not (thing-space ?dnew)))
                         (at end (free ?a))
                         (at end (increase (total-cost) (therblig-cost ?th ?a)))
                     )
        )

        (:durative-action grasp
            :parameters (?th - g ?a - agent ?t - thing ?dcurrent ?dnew - destination)
            :duration (= ?duration (therblig-time ?th ?a ?dcurrent ?dnew))
            :condition (and (at start (free ?a))
                            (= ?dcurrent ?dnew)
                            (at start (not-executed ?th))
                            (at start (agent-allocation ?th ?a))
                            (at start (thing-allocation ?th ?t))
                            (at start (not-gripping ?a))
                            (at start (at ?a ?dcurrent))
                            (at start (at ?t ?dcurrent))
                       )
            :effect (and (at start (not (free ?a)))
                         (at start (not (not-executed ?th)))
                         (at end (gripping ?a))
                         (at end (not (not-gripping ?a)))
                         (at end (free ?a))
                         (at end (increase (total-cost) (therblig-cost ?th ?a)))
                     )
        )

        (:durative-action release
            :parameters (?th - rl ?a - agent ?t - thing ?dcurrent ?dnew - destination)
            :duration (= ?duration (therblig-time ?th ?a ?dcurrent ?dnew))
            :condition (and (at start (free ?a))
                            (= ?dcurrent ?dnew)
                            (at start (not-executed ?th))
                            (at start (agent-allocation ?th ?a))
                            (at start (thing-allocation ?th ?t))
                            (at start (gripping ?a))
                            (at start (at ?a ?dcurrent))
                            (at start (at ?t ?dcurrent))
                       )
            :effect (and (at start (not (free ?a)))
                         (at start (not (not-executed ?th)))
                         (at end (not (gripping ?a)))
                         (at end (not-gripping ?a))
                         (at end (free ?a))
                         (at end (increase (total-cost) (therblig-cost ?th ?a)))
                     )
        )
    )